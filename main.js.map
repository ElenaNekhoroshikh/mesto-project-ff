{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/webpack/bootstrap","webpack://mesto-project-ff/webpack/runtime/define property getters","webpack://mesto-project-ff/webpack/runtime/hasOwnProperty shorthand","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/index.js","webpack://mesto-project-ff/./src/components/cards.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { cardTemplate } from '../index.js';\r\nexport { deleteCard, addLike, createCard };\r\n\r\n// @todo: Функция создания карточки\r\nfunction createCard (place, deleteCard, addLike, openPopapImg) {\r\n  const cardElement = cardTemplate.querySelector('.places__item').cloneNode(true);\r\n  const cardImage = cardElement.querySelector('.card__image');\r\n  const cardTitle = cardElement.querySelector('.card__title');\r\n  const deleteButton = cardElement.querySelector('.card__delete-button');\r\n  const likeButton = cardElement.querySelector('.card__like-button');\r\n\r\n  cardTitle.textContent = place.name;\r\n  cardImage.src = place.link;\r\n  cardImage.alt = 'Фотография с места - ' + place.name;\r\n\r\n  deleteButton.addEventListener('click', deleteCard);\r\n  likeButton.addEventListener('click', addLike);\r\n\r\n  cardImage.addEventListener('click', function () {\r\n    openPopapImg(place.link, place.name);\r\n  });\r\n\r\nreturn cardElement;\r\n}\r\n\r\n// @todo: Функция удаления карточки\r\nfunction deleteCard(evt) {\r\n  const delcard = evt.target.closest('.places__item');\r\n  delcard.remove();\r\n}\r\n\r\n// Функция лайка\r\nfunction addLike(evt) {\r\n  const currentCard = evt.target.closest('.card');\r\n  const cardToLike = currentCard.querySelector('.card__like-button');\r\n  cardToLike.classList.toggle('card__like-button_is-active');\r\n}\r\n\r\n","export { openPopup, closePopup };\r\n\r\n// Функция для открытия попапа\r\nfunction openPopup(popup) {\r\n  // Добавляем класс для открытия попапа\r\n  popup.classList.add('popup_is-opened');\r\n  // Добавляем класс для анимации открытия попапа\r\n  popup.classList.add('popup_is-animated');\r\n  \r\n  // Добавляем обработчик события для нажатия клавиши \"Escape\"\r\n  document.addEventListener('keydown', closeEscPopup);\r\n}\r\n\r\n// Функция для закрытия попапа\r\nfunction closePopup(popup) {\r\n  // Убираем класс для открытия попапа\r\n  popup.classList.remove('popup_is-opened');\r\n  // Добавляем класс для анимации закрытия попапа\r\n  popup.classList.add('popup_is-animated');\r\n\r\n   // Удаляем обработчик события для нажатия клавиши \"Escape\"\r\n  document.removeEventListener('keydown', closeEscPopup);\r\n}\r\n\r\n// Функция для закрытия попапа при нажатии клавиши \"Escape\"\r\nfunction closeEscPopup(evt) {\r\n  if(evt.key === 'Escape') {\r\n    const popup = document.querySelector('.popup_is-opened');\r\n    closePopup(popup);\r\n  }\r\n}\r\n","import { initialCards } from './components/cards.js';\r\nimport './pages/index.css'; // импорт главного файла стилей\r\nimport { deleteCard, addLike, createCard } from './components/card.js';\r\nimport { openPopup, closePopup } from './components/modal.js';\r\n\r\nconst cardsContainer = document.querySelector('.places__list');\r\nexport const cardTemplate = document.querySelector('#card-template').content;\r\nexport const newPlace = document.forms['new-place'];\r\nconst placeName = newPlace.querySelector('.popup__input_type_card-name');\r\nconst placeLink = newPlace.querySelector('.popup__input_type_url');\r\n\r\n// Находим все элементы с классом 'popup' на странице\r\nconst popups = document.querySelectorAll('.popup');\r\n\r\n// Находим элементы попапов на странице\r\nconst popupProfile = document.querySelector('.popup_type_edit');\r\nconst popupAddNewCard = document.querySelector('.popup_type_new-card');\r\nconst popupImage = document.querySelector('.popup_type_image');\r\n\r\n// Находим кнопки для открытия попапов\r\nconst editButton = document.querySelector('.profile__edit-button');\r\nconst addButton = document.querySelector('.profile__add-button');\r\n\r\n// Находим элементы внутри попапа изображения\r\nconst popupImageImage = document.querySelector('.popup__image');\r\nconst popupCaptionImage = document.querySelector('.popup__caption');\r\n\r\n// Находим элементы формы редактирования профиля\r\nconst profileTitle = document.querySelector('.profile__title');\r\nconst profileDescription = document.querySelector('.profile__description');\r\nconst profileForm = document.forms['edit-profile'];\r\nconst nameInput = profileForm.querySelector('.popup__input_type_name');\r\nconst jobInput = profileForm.querySelector('.popup__input_type_description');\r\n\r\n// Функция добавления массива карточек на страницу\r\nfunction addCards() {\r\n  initialCards.forEach(function (place) {\r\n    const card = createCard(place, deleteCard, addLike, openImagePopup);\r\n    cardsContainer.appendChild(card);\r\n  });\r\n}\r\n\r\n// Вывести карточки на страницу\r\naddCards();\r\n\r\n//Добавление новой карточки \r\nfunction addCardToCardsArray(evt) {\r\n  evt.preventDefault();\r\n  const newCard = {\r\n    name: placeName.value,\r\n    link: placeLink.value,\r\n  };\r\n  const newPlaceCard = createCard(newCard, deleteCard, addLike);\r\n  cardsContainer.insertBefore(newPlaceCard, cardsContainer.firstChild);\r\n  newPlace.reset();\r\n  closePopup(popupAddNewCard);\r\n}\r\n\r\n// Функция для установки значений формы редактирования профиля\r\nfunction setProfileFormValues() {\r\n  nameInput.value = profileTitle.textContent;\r\n  jobInput.value = profileDescription.textContent;\r\n}\r\n\r\n// Функция для открытия попапа редактирования профиля при нажатии на кнопку\r\nfunction openProfilePopupByButton() {\r\n  setProfileFormValues();\r\n  openPopup(popupProfile);\r\n}\r\n\r\n// Добавляем обработчик события для открытия попапа редактирования профиля\r\neditButton.addEventListener('click', openProfilePopupByButton);\r\n\r\n// Функция для изменения профиля\r\nfunction changeProfile(evt) {\r\n  evt.preventDefault();\r\n  profileTitle.textContent = nameInput.value;\r\n  profileDescription.textContent = jobInput.value;\r\n  closePopup(popupProfile);\r\n  profileForm.reset();\r\n}\r\n\r\n// Устанавливаем значения формы при загрузке страницы\r\nsetProfileFormValues();\r\n\r\n// Добавляем обработчики событий для форм и кнопок \r\nprofileForm.addEventListener('submit', changeProfile);\r\nnewPlace.addEventListener('submit', addCardToCardsArray);\r\n\r\n// Функция для открытия попапа при нажатии на кнопку\r\nfunction openPopupByButton(button, popup) {\r\n  // Добавляем обработчик события для клика по кнопке\r\n    button.addEventListener('click', function () {\r\n      openPopup(popup);\r\n    });\r\n  }\r\n\r\n// Вызов функции для открытия попапа добавления новой карточки при нажатии на кнопку\r\nopenPopupByButton(addButton, popupAddNewCard);\r\n\r\n// Функция для открытия попапа изображения\r\nfunction openImagePopup(link, alt) {\r\n  popupImageImage.src = link;\r\n  popupImageImage.alt = alt;\r\n  popupCaptionImage.textContent = alt;\r\n  openPopup(popupImage);\r\n}\r\n\r\n// Добавляем обработчики событий для каждого попапа на оверлэй\r\npopups.forEach(function (popup) {\r\n  popup.addEventListener('click', function (evt) {\r\n    // Закрываем попап, если кликнули по самому попапу или по элементу с классом 'popup__close'\r\n    if (\r\n      evt.target === evt.currentTarget ||\r\n      evt.target.classList.contains('popup__close')\r\n    ) {\r\n      closePopup(popup);\r\n    }\r\n  });\r\n});\r\n\r\n// Функция для установки текущего года в элемент с id 'year'\r\ndocument.getElementById('year').textContent = new Date().getFullYear();\r\n","export const initialCards = [\r\n  {\r\n    name: \"Архыз\",\r\n    link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg\",\r\n  },\r\n  {\r\n    name: \"Челябинская область\",\r\n    link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg\",\r\n  },\r\n  {\r\n    name: \"Иваново\",\r\n    link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg\",\r\n  },\r\n  {\r\n    name: \"Камчатка\",\r\n    link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg\",\r\n  },\r\n  {\r\n    name: \"Холмогорский район\",\r\n    link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg\",\r\n  },\r\n  {\r\n    name: \"Байкал\",\r\n    link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg\",\r\n  }\r\n];\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","createCard","place","deleteCard","addLike","openPopapImg","cardElement","cardTemplate","querySelector","cloneNode","cardImage","cardTitle","deleteButton","likeButton","textContent","name","src","link","alt","addEventListener","evt","target","closest","remove","classList","toggle","openPopup","popup","add","document","closeEscPopup","closePopup","removeEventListener","cardsContainer","content","newPlace","forms","placeName","placeLink","popups","querySelectorAll","popupProfile","popupAddNewCard","popupImage","editButton","addButton","popupImageImage","popupCaptionImage","profileTitle","profileDescription","profileForm","nameInput","jobInput","setProfileFormValues","value","openImagePopup","forEach","card","appendChild","preventDefault","reset","newPlaceCard","insertBefore","firstChild","currentTarget","contains","getElementById","Date","getFullYear"],"sourceRoot":""}